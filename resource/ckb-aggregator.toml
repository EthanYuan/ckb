# Branch Chain built-in aggregator settings.

data_dir = "data"

[chain]
# Choose the kind of chains to run, possible values:
# - { file = "specs/dev.toml" }
# - { bundled = "specs/testnet.toml" }
# - { bundled = "specs/mainnet.toml" }
spec = { file = "specs/dev.toml" } # {{
# testnet => spec = { {spec_source} = "specs/testnet.toml" }
# mainnet => spec = { {spec_source} = "specs/mainnet.toml" }
# staging => spec = { {spec_source} = "specs/staging.toml" }
# integration => spec = { file = "specs/integration.toml" }
# }}

[logger]
filter = "info"
color = true
log_to_file = true # {{
# _ => log_to_file = {log_to_file}
# }}
log_to_stdout = true # {{
# _ => log_to_stdout = {log_to_stdout}
# }}

[sentry]
# set to blank to disable sentry error collection
dsn = "" # {{
# testnet => dsn = "https://dda4f353e15f4b62800d273a2afe70c2@sentry.nervos.org/4"
# staging => dsn = "https://dda4f353e15f4b62800d273a2afe70c2@sentry.nervos.org/4"
# }}
# if you are willing to help us to improve,
# please leave a way to contact you when we have troubles to reproduce the errors.
# org_contact = ""

# # **Experimental** Monitor memory changes.
# [memory_tracker]
# # Seconds between checking the process, 0 is disable, default is 0.
# interval = 600

[aggregator]
# RGB++ uri
rgbpp_uri = "https://testnet.ckb.dev"
rgbpp_ckb_provider_key_path = "../dev/rgbpp_ckb_provider_key"
rgbpp_queue_lock_key_path = "../dev/rgbpp_queue_lock_key"
rgbpp_custodian_lock_key_path = "../dev/rgbpp_custodian_lock_key"

# Branch Chain
branch_uri = "http://localhost:8114"
branch_chain_capacity_provider_key_path = "../dev/branch_chain_capacity_provider_key"
branch_chain_token_manager_lock_key_path = "../dev/branch_chain_token_manager_key"
branch_chain_token_manager_outbox_lock_key_path = "../dev/branch_chain_token_manager_outbox_key"

[[aggregator.gbpp_scripts]]
script_name = "secp256k1_blake160"
script = '''
{
    "args": "0x",
    "code_hash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
    "hash_type": "type"
}
'''
cell_dep = '''
{
    "dep_type": "dep_group",
    "out_point": {
        "index": "0x0",
        "tx_hash": "0xf8de3bb47d055cdf460d93a2a6e1b05f7432f9777c8c474abf4eec1d4aee5d37"
    }
}
'''

[[aggregator.rgbpp_scripts]]
script_name = "xudt"
script = '''
{
    "args": "0x",
    "code_hash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
    "hash_type": "type"
}
'''
cell_dep = '''
{
    "dep_type": "code",
    "out_point": {
        "index": "0x0",
        "tx_hash": "0xbf6fb538763efec2a70a6a3dcb7242787087e1030c4e7d86585bc63a9d337f5f"
    }
}
'''

[[aggregator.rgbpp_scripts]]
script_name = "request_lock"
script = '''
{
    "args": "0x",
    "code_hash": "0x2fca96b423bd2b4d0d4b5098bf7a3e74ea42c3f2e1bb6f973f7c1c68adfa3d9c",
    "hash_type": "type"
}
'''
cell_dep = '''
{
    "dep_type": "code",
    "out_point": {
        "index": "0x0",
        "tx_hash": "0x79e7a69cf175cde1d8f4fd1f7f5c9792cf07b4099a4a75946393ac6616b7aa0b"
    }
}
'''

[[aggregator.rgbpp_scripts]]
script_name = "queue_type"
script = '''
{
    "args": "0x4242",
    "code_hash": "0x2da1e80cec3e553a76e22d826b63ce5f65d77622de48caa5a2fe724b0f9a18f2",
    "hash_type": "type"
}
'''
cell_dep = '''
{
    "dep_type": "code",
    "out_point": {
        "index": "0x0",
        "tx_hash": "0xeb4614bc1d8b2aadb928758c77a07720f1794418d0257a61bac94240d4c21905"
    }
}
'''

[[aggregator.branch_scripts]]
script_name = "secp256k1_blake160"
script = '''
{
    "args": "0x",
    "code_hash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
    "hash_type": "type"
}
'''
cell_dep = '''
{
    "dep_type": "dep_group",
    "out_point": {
        "index": "0x0",
        "tx_hash": "0xdd4fea4dc94ae5b3bd5a8a169f7edf6ea731689eec39b94f395a1a8ea1321205"
    }
}
'''

[[aggregator.branch_scripts]]
script_name = "xudt"
script = '''
{
    "args": "0x",
    "code_hash": "0x6283a479a3cf5d4276cd93594de9f1827ab9b55c7b05b3d28e4c2e0a696cfefd",
    "hash_type": "type"
}
'''
cell_dep = '''
{
    "dep_type": "code",
    "out_point": {
        "index": "0x5",
        "tx_hash": "0x7f1180615b86b8216cfb4a9b5421828c41f766f8d3111239e63d253d2ad81381"
    }
}
'''

[[aggregator.branch_scripts]]
script_name = "request_lock"
script = '''
{
    "args": "0x",
    "code_hash": "0x1a1e4fef34f5982906f745b048fe7b1089647e82346074e0f32c2ece26cf6b1e",
    "hash_type": "type"
}
'''
cell_dep = '''
{
    "dep_type": "code",
    "out_point": {
        "index": "0x6",
        "tx_hash": "0x7f1180615b86b8216cfb4a9b5421828c41f766f8d3111239e63d253d2ad81381"
    }
}
'''

[[aggregator.rgbpp_assets]]
asset_name = "f091"
# Only the first is_capacity = true is valid; others should be treated as false
is_capacity = true
asset_id = "29b0b1a449b0e7fb08881e1d810a6abbedb119e9c4ffc76eebbc757fb214f091"
script = '''
{
    "args": "0x562e4e8a2f64a3e9c24beb4b7dd002d0ad3b842d0cc77924328e36ad114e3ebe",
    "code_hash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
    "hash_type": "type"
}
'''

[[aggregator.rgbpp_asset_locks]]
lock_hash = "562e4e8a2f64a3e9c24beb4b7dd002d0ad3b842d0cc77924328e36ad114e3ebe"
script = '''
{
    "args": "0xf9a9ad51ed14936d33f7bb854aaefa5f47a3ccbd",
    "code_hash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
    "hash_type": "type"
}
'''

[[aggregator.rgbpp_asset_locks]]
lock_hash = "3494ad80b80de5ce7bcbbbdac53d888666c576ea8a49b83ca108fc18641eb278"
script = '''
{
    "args": "0x0dc39ff2d4da099fbd2613fdab8fe55f65e23143",
    "code_hash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
    "hash_type": "type"
}
'''

[[aggregator.rgbpp_asset_locks]]
lock_hash = "0a97a585361f3deabb69f28b2bc08d05f3a224cd1ce805996526c8f041a733fb"
script = '''
{
    "args": "0xa0c73e84d827b87073a2a0e6448921870d114d02",
    "code_hash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
    "hash_type": "type"
}
'''