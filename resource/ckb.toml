# Config generated by `ckb init --chain dev` # {{
# see => resource/src/template.rs
# mainnet => # Config generated by `ckb init --chain mainnet`
# testnet => # Config generated by `ckb init --chain testnet`
# staging => # Config generated by `ckb init --chain staging`
# }}

data_dir = "data"

[chain]
# Choose the kind of chains to run, possible values:
# - { file = "specs/dev.toml" }
# - { bundled = "specs/testnet.toml" }
# - { bundled = "specs/mainnet.toml" }
spec = { file = "specs/dev.toml" } # {{
# testnet => spec = { {spec_source} = "specs/testnet.toml" }
# mainnet => spec = { {spec_source} = "specs/mainnet.toml" }
# staging => spec = { {spec_source} = "specs/staging.toml" }
# integration => spec = { file = "specs/integration.toml" }
# }}

[logger]
filter = "info" # {{
# integration => filter = "info,ckb-rpc=debug,ckb-sync=debug,ckb-relay=debug,ckb-tx-pool=debug,ckb-network=debug"
# }}
color = true
log_to_file = true # {{
# _ => log_to_file = {log_to_file}
# }}
log_to_stdout = true # {{
# _ => log_to_stdout = {log_to_stdout}
# }}

[sentry]
# set to blank to disable sentry error collection
dsn = "" # {{
# testnet => dsn = "https://dda4f353e15f4b62800d273a2afe70c2@sentry.nervos.org/4"
# staging => dsn = "https://dda4f353e15f4b62800d273a2afe70c2@sentry.nervos.org/4"
# mainnet => dsn = ""
# }}
# if you are willing to help us to improve,
# please leave a way to contact you when we have troubles to reproduce the errors.
# org_contact = ""

# # **Experimental** Monitor memory changes.
# [memory_tracker]
# # Seconds between checking the process, 0 is disable, default is 0.
# interval = 600

[db]
# The capacity of RocksDB cache, which caches uncompressed data blocks, indexes and filters, default is 256MB.
# Rocksdb will automatically create and use an 32MB internal cache for each column family by default if you set this value to 0.
# To turning off cache, you need to set this value to 0 and set `no_block_cache = true` in the options_file,
# however, we strongly discourage this setting, it may lead to severe performance degradation.
cache_size = 268435456

# Provide an options file to tune RocksDB for your workload and your system configuration.
# More details can be found in [the official tuning guide](https://github.com/facebook/rocksdb/wiki/RocksDB-Tuning-Guide).
options_file = "default.db-options"

[network]
listen_addresses = ["/ip4/0.0.0.0/tcp/8115"] # {{
# _ => listen_addresses = ["/ip4/0.0.0.0/tcp/{p2p_port}"]
# }}
### Specify the public and routable network addresses
# public_addresses = []

# Node connects to nodes listed here to discovery other peers when there's no local stored peers.
# When chain.spec is changed, this usually should also be changed to the bootnodes in the new chain.
bootnodes = [] # {{
# staging => bootnodes = []
# }}

### Whitelist-only mode
# whitelist_only = false
### Whitelist peers connecting from the given IP addresses
# whitelist_peers = []
### Enable `SO_REUSEPORT` feature to reuse port on Linux, not supported on other OS yet
# reuse_port_on_linux = true

max_peers = 125
max_outbound_peers = 8
# 2 minutes
ping_interval_secs = 120
# 20 minutes
ping_timeout_secs = 1200
connect_outbound_interval_secs = 15
# If set to true, try to register upnp
upnp = false
# If set to true, network service will add discovered local address to peer store, it's helpful for private net development
discovery_local_address = false # {{
# dev => discovery_local_address = true
# }}
# If set to true, random cleanup when there are too many inbound nodes
# Ensure that itself can continue to serve as a bootnode node
bootnode_mode = false

# Supported protocols list, only "Sync" and "Identify" are mandatory, others are optional
support_protocols = ["Ping", "Discovery", "Identify", "Feeler", "DisconnectMessage", "Sync", "Relay", "Time", "Alert", "LightClient", "Filter"]

# [network.sync.header_map]
# memory_limit = "256MB"

[rpc]
# By default RPC only binds to localhost, thus it only allows accessing from the same machine.
#
# Allowing arbitrary machines to access the JSON-RPC port is dangerous and strongly discouraged.
# Please strictly limit the access to only trusted machines.
listen_address = "127.0.0.1:8114" # {{
# _ => listen_address = "127.0.0.1:{rpc_port}"
# }}

# Default is 10MiB = 10 * 1024 * 1024
max_request_body_size = 10485760

# List of API modules: ["Net", "Pool", "Miner", "Chain", "Stats", "Subscription", "Experiment", "Debug", "Indexer", "RichIndexer"]
modules = ["Net", "Pool", "Miner", "Chain", "Stats", "Subscription", "Experiment"] # {{
# dev => modules = ["Net", "Pool", "Miner", "Chain", "Stats", "Subscription", "Experiment", "Debug"]
# integration => modules = ["Net", "Pool", "Miner", "Chain", "Experiment", "Stats", "IntegrationTest"]
# }}

# By default RPC only binds to HTTP service, you can bind it to TCP and WebSocket.
# tcp_listen_address = "127.0.0.1:18114"
# ws_listen_address = "127.0.0.1:28114"
reject_ill_transactions = true

# By default deprecated rpc methods are disabled.
enable_deprecated_rpc = false # {{
# integration => enable_deprecated_rpc = true
# }}

[tx_pool]
max_tx_pool_size = 180_000_000 # 180mb
min_fee_rate = 10 # Here fee_rate are calculated directly using size in units of shannons/KB
# min_rbf_rate > min_fee_rate means RBF is enabled
min_rbf_rate = 15 # Here fee_rate are calculated directly using size in units of shannons/KB
max_tx_verify_cycles = 70_000_000
max_ancestors_count = 25

[store]
header_cache_size          = 4096
cell_data_cache_size       = 128
block_proposals_cache_size = 30
block_tx_hashes_cache_size = 30
block_uncles_cache_size    = 30

# [notify]
# # Execute command when the new tip block changes, first arg is block hash.
# new_block_notify_script = "your_new_block_notify_script.sh"
# # Execute command when node received an network alert, first arg is alert message string.
# network_alert_notify_script = "your_network_alert_notify_script.sh"

# Set the lock script to protect mined CKB.
#
# CKB uses CS architecture for miner. Miner process (ckb miner) gets block
# template from the Node process (ckb run) via RPC. Thus the lock script is
# configured in ckb.toml instead of ckb-miner.toml, and the config takes effect
# after restarting Node process.
#
# The `code_hash` identifies different cryptography algorithm. Read the manual
# of the lock script provider about how to generate this config.
#
# CKB provides an secp256k1 implementation, it requires a hash on the
# compressed public key. The hash algorithm is blake2b, with personal
# "ckb-default-hash". The first 160 bits (20 bytes) are used as the only arg.
#
# You can use any tool you trust to generate a Bitcoin private key and public
# key pair, which can be used in CKB as well. CKB CLI provides the function for
# you to convert the public key into block assembler configuration parameters.
#
# Here is an example using ckb-cli to generate an account, this command will
# print the block assembler args(lock_arg) to screen:
#
#     ckb-cli account new
#
# If you already have a raw secp256k1 private key, you can get the lock_arg by:
#
#     ckb-cli util key-info --privkey-path <privkey-path>
#
# The command `ckb init` also accepts options to generate the block assembler
# directly. See `ckb init --help` for details.
#
#     ckb init <lock_arg>
#
# # {{
# _ => {block_assembler}
# }}
# #
# # CKB will prepend the binary version to message, to identify the block miner client. (default true, false to disable it)
# use_binary_version_as_message_prefix = true
# #
# # Block assembler will notify new block template through http post to specified endpoints when update
# notify = ["http://127.0.0.1:8888"]
# # Or you may want use more flexible scripts, block template as arg.
# notify_scripts = ["{cmd} {blocktemplate}"]
#
# # CKB built-in indexer/rich-indexer settings.
# # Utilize the `ckb reset-data --indexer` and `ckb reset-data --rich-indexer` subcommands to efficiently clean existing indexes.
# [indexer_v2]
# # Indexing the pending txs in the ckb tx-pool
# index_tx_pool = false
# # Customize block filtering rules to index only retained blocks
# block_filter = "block.header.number.to_uint() >= \"0x0\".to_uint()"
# # Customize cell filtering rules to index only retained cells
# cell_filter = "let script = output.type;script!=() && script.code_hash == \"0x00000000000000000000000000000000000000000000000000545950455f4944\""
# # The initial tip can be set higher than the current indexer tip as the starting height for indexing.
# init_tip_hash = "0x8fbd0ec887159d2814cee475911600e3589849670f5ee1ed9798b38fdeef4e44"
#
# # CKB rich-indexer has its unique configuration.
# [indexer_v2.rich_indexer]
# # By default, it uses an embedded SQLite database.
# # Alternatively, you can set up a PostgreSQL database service and provide the connection parameters.
# db_type = "postgres"
# db_name = "ckb-rich-indexer"
# db_host = "127.0.0.1"
# db_port = 5432
# db_user = "postgres"
# db_password = "123456"

# Branch Chain built-in aggregator settings.
[aggregator]
# RGB++ uri
rgbpp_uri = "https://testnet.ckb.dev"
rgbpp_ckb_provider_key_path = "../dev/rgbpp_ckb_provider_key"
rgbpp_queue_lock_key_path = "../dev/rgbpp_queue_lock_key"
rgbpp_custodian_lock_key_path = "../dev/rgbpp_custodian_lock_key"
# Branch Chain
branch_uri = "http://localhost:8114"
branch_chain_capacity_provider_key_path = "../dev/branch_chain_capacity_provider_key"
branch_chain_token_manager_lock_key_path = "../dev/branch_chain_token_manager_key"

[[aggregator.rgbpp_scripts]]
script_name = "secp256k1_blake160"
script = '''
{
    "args": "0x",
    "code_hash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
    "hash_type": "type"
}
'''
cell_dep = '''
{
    "dep_type": "dep_group",
    "out_point": {
        "index": "0x0",
        "tx_hash": "0xf8de3bb47d055cdf460d93a2a6e1b05f7432f9777c8c474abf4eec1d4aee5d37"
    }
}
'''

[[aggregator.rgbpp_scripts]]
script_name = "xudt"
script = '''
{
    "args": "0x",
    "code_hash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
    "hash_type": "type"
}
'''
cell_dep = '''
{
    "dep_type": "code",
    "out_point": {
        "index": "0x0",
        "tx_hash": "0xbf6fb538763efec2a70a6a3dcb7242787087e1030c4e7d86585bc63a9d337f5f"
    }
}
'''

[[aggregator.rgbpp_scripts]]
script_name = "request_lock"
script = '''
{
    "args": "0x",
    "code_hash": "0x2fca96b423bd2b4d0d4b5098bf7a3e74ea42c3f2e1bb6f973f7c1c68adfa3d9c",
    "hash_type": "type"
}
'''
cell_dep = '''
{
    "dep_type": "code",
    "out_point": {
        "index": "0x0",
        "tx_hash": "0x79e7a69cf175cde1d8f4fd1f7f5c9792cf07b4099a4a75946393ac6616b7aa0b"
    }
}
'''

[[aggregator.rgbpp_scripts]]
script_name = "queue_type"
script = '''
{
    "args": "0x4242",
    "code_hash": "0x2da1e80cec3e553a76e22d826b63ce5f65d77622de48caa5a2fe724b0f9a18f2",
    "hash_type": "type"
}
'''
cell_dep = '''
{
    "dep_type": "code",
    "out_point": {
        "index": "0x0",
        "tx_hash": "0xeb4614bc1d8b2aadb928758c77a07720f1794418d0257a61bac94240d4c21905"
    }
}
'''

[[aggregator.branch_scripts]]
script_name = "secp256k1_blake160"
script = '''
{
    "args": "0x",
    "code_hash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",
    "hash_type": "type"
}
'''
cell_dep = '''
{
    "dep_type": "dep_group",
    "out_point": {
        "index": "0x0",
        "tx_hash": "0xd3e71819d81b71a0dbe5babd414aa65d25c9ae082f38ac303772de48d18985e8"
    }
}
'''

[[aggregator.branch_scripts]]
script_name = "xudt"
script = '''
{
    "args": "0x",
    "code_hash": "0x6283a479a3cf5d4276cd93594de9f1827ab9b55c7b05b3d28e4c2e0a696cfefd",
    "hash_type": "type"
}
'''
cell_dep = '''
{
    "dep_type": "code",
    "out_point": {
        "index": "0x5",
        "tx_hash": "0x1836c681a0de9e48d1ffc206ab684ebad53ad65a2878fc6a28ede4a8970d075c"
    }
}
'''

[[aggregator.rgbpp_assets]]
asset_name = "Unknown Token #d7d6"
# Only the first is_capacity = true is valid; others should be treated as false
is_capacity = true
asset_id = "0x1e1e5f0d711c1b9a5231d49997ed1c0bf7d602de53d960770b1cb38f4e6fd7d6"
script = '''
{
    "args": "0x737e3449341faf2704ff6883cd09d22639f71cc7f69aee10d6505eeef1474493",
    "code_hash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
    "hash_type": "type"
}
'''

[[aggregator.rgbpp_asset_locks]]
lock_hash = "0x1e1e5f0d711c1b9a5231d49997ed1c0bf7d602de53d960770b1cb38f4e6fd7d6"
script = '''
{
    "args": "0x737e3449341faf2704ff6883cd09d22639f71cc7f69aee10d6505eeef1474493",
    "code_hash": "0x25c29dc317811a6f6f3985a7a9ebc4838bd388d19d0feeecf0bcd60f6c0975bb",
    "hash_type": "type"
}
'''